import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase-server'
import { cookies } from 'next/headers'

export const dynamic = 'force-dynamic'

interface RouteParams {
  params: {
    taskId: string
  }
}

export async function GET(request: NextRequest, { params }: RouteParams) {
  try {
    const cookieStore = cookies()
    const supabase = createClient(cookieStore)
    const { taskId } = params
    
    // 验证用户认证
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized', message: 'Please log in to download translation results' },
        { status: 401 }
      )
    }

    // 验证taskId格式
    if (!taskId || typeof taskId !== 'string') {
      return NextResponse.json(
        { error: 'Invalid Request', message: 'Invalid task ID' },
        { status: 400 }
      )
    }

    // 查询翻译任务
    const { data: job, error: queryError } = await supabase
      .from('translation_jobs')
      .select(`
        id,
        user_id,
        job_type,
        status,
        source_language,
        target_language,
        original_content,
        translated_content,
        file_info,
        metadata,
        created_at,
        processing_completed_at
      `)
      .eq('id', taskId)
      .eq('user_id', user.id) // 确保用户只能下载自己的任务
      .single()

    if (queryError || !job) {
      return NextResponse.json(
        { error: 'Not Found', message: 'Translation task not found or access denied' },
        { status: 404 }
      )
    }

    // 检查任务状态
    if (job.status !== 'completed' && job.status !== 'partial_success') {
      return NextResponse.json(
        { error: 'Not Ready', message: 'Translation is not completed yet' },
        { status: 400 }
      )
    }

    // 检查是否有翻译结果
    if (!job.translated_content && job.job_type === 'text') {
      return NextResponse.json(
        { error: 'No Content', message: 'No translation result available' },
        { status: 404 }
      )
    }

    // 生成文件名
    const timestamp = new Date(job.created_at).toISOString().split('T')[0]
    const languagePair = `${job.source_language}-to-${job.target_language}`
    
    if (job.job_type === 'text') {
      // 文本翻译下载
      const fileName = `translation_${languagePair}_${timestamp}.txt`
      const content = job.translated_content || 'No translation result available'
      
      // 创建文本文件内容
      const fileContent = [
        `Translation Result`,
        `==================`,
        `Source Language: ${job.source_language}`,
        `Target Language: ${job.target_language}`,
        `Created: ${new Date(job.created_at).toLocaleString()}`,
        `Completed: ${job.processing_completed_at ? new Date(job.processing_completed_at).toLocaleString() : 'N/A'}`,
        `Status: ${job.status}`,
        ``,
        `Original Text:`,
        `--------------`,
        job.original_content || 'N/A',
        ``,
        `Translation:`,
        `------------`,
        content,
        ``,
        `Generated by Loretrans - ${new Date().toISOString()}`
      ].join('\n')

      return new NextResponse(fileContent, {
        status: 200,
        headers: {
          'Content-Type': 'text/plain; charset=utf-8',
          'Content-Disposition': `attachment; filename="${fileName}"`,
          'Cache-Control': 'no-cache, no-store, must-revalidate',
          'Pragma': 'no-cache',
          'Expires': '0',
        },
      })
      
    } else if (job.job_type === 'document') {
      // 文档翻译下载
      const fileInfo = job.file_info || {}
      const originalFileName = fileInfo.originalName || 'document'
      const fileExtension = originalFileName.split('.').pop() || 'txt'
      const baseFileName = originalFileName.replace(/\.[^/.]+$/, '')
      const fileName = `${baseFileName}_translated_${languagePair}_${timestamp}.${fileExtension}`
      
      // 检查是否有文档下载URL
      if (fileInfo.translatedFileUrl) {
        // 如果有直接的文件URL，重定向到该URL
        return NextResponse.redirect(fileInfo.translatedFileUrl)
      }
      
      // 如果没有文件URL，但有翻译内容，创建文本文件
      if (job.translated_content) {
        const fileContent = [
          `Document Translation Result`,
          `==========================`,
          `Original File: ${originalFileName}`,
          `Source Language: ${job.source_language}`,
          `Target Language: ${job.target_language}`,
          `Created: ${new Date(job.created_at).toLocaleString()}`,
          `Completed: ${job.processing_completed_at ? new Date(job.processing_completed_at).toLocaleString() : 'N/A'}`,
          `Status: ${job.status}`,
          ``,
          `Translated Content:`,
          `-------------------`,
          job.translated_content,
          ``,
          `Generated by Loretrans - ${new Date().toISOString()}`
        ].join('\n')

        return new NextResponse(fileContent, {
          status: 200,
          headers: {
            'Content-Type': 'text/plain; charset=utf-8',
            'Content-Disposition': `attachment; filename="${fileName.replace(/\.[^/.]+$/, '.txt')}"`,
            'Cache-Control': 'no-cache, no-store, must-revalidate',
            'Pragma': 'no-cache',
            'Expires': '0',
          },
        })
      }
      
      return NextResponse.json(
        { error: 'No Content', message: 'No translated document available for download' },
        { status: 404 }
      )
    }

    return NextResponse.json(
      { error: 'Unsupported Type', message: 'Unsupported job type for download' },
      { status: 400 }
    )

  } catch (error) {
    console.error('Translation download API error:', error)
    return NextResponse.json(
      { error: 'Internal Server Error', message: 'An unexpected error occurred' },
      { status: 500 }
    )
  }
}

// 获取下载信息（不实际下载文件）
export async function POST(request: NextRequest, { params }: RouteParams) {
  try {
    const cookieStore = cookies()
    const supabase = createClient(cookieStore)
    const { taskId } = params
    
    // 验证用户认证
    const { data: { user }, error: authError } = await supabase.auth.getUser()
    
    if (authError || !user) {
      return NextResponse.json(
        { error: 'Unauthorized' },
        { status: 401 }
      )
    }

    // 查询翻译任务
    const { data: job, error: queryError } = await supabase
      .from('translation_jobs')
      .select(`
        id,
        job_type,
        status,
        source_language,
        target_language,
        file_info,
        created_at,
        processing_completed_at,
        translated_content
      `)
      .eq('id', taskId)
      .eq('user_id', user.id)
      .single()

    if (queryError || !job) {
      return NextResponse.json(
        { error: 'Not Found' },
        { status: 404 }
      )
    }

    // 生成下载信息
    const timestamp = new Date(job.created_at).toISOString().split('T')[0]
    const languagePair = `${job.source_language}-to-${job.target_language}`
    
    let downloadInfo = {
      taskId: job.id,
      jobType: job.job_type,
      status: job.status,
      canDownload: job.status === 'completed' || job.status === 'partial_success',
      downloadUrl: `/api/translate/download/${job.id}`,
      fileName: '',
      fileSize: 0,
      contentType: 'text/plain',
    }

    if (job.job_type === 'text') {
      downloadInfo.fileName = `translation_${languagePair}_${timestamp}.txt`
      downloadInfo.fileSize = (job.translated_content || '').length
      downloadInfo.contentType = 'text/plain'
    } else if (job.job_type === 'document') {
      const fileInfo = job.file_info || {}
      const originalFileName = fileInfo.originalName || 'document'
      const baseFileName = originalFileName.replace(/\.[^/.]+$/, '')
      const fileExtension = originalFileName.split('.').pop() || 'txt'
      
      downloadInfo.fileName = `${baseFileName}_translated_${languagePair}_${timestamp}.${fileExtension}`
      downloadInfo.fileSize = fileInfo.translatedFileSize || 0
      downloadInfo.contentType = fileInfo.contentType || 'application/octet-stream'
    }

    return NextResponse.json({ downloadInfo })

  } catch (error) {
    console.error('Translation download info API error:', error)
    return NextResponse.json(
      { error: 'Internal Server Error' },
      { status: 500 }
    )
  }
}
