name: Build & Push Docker Images

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME || 'looplay' }}

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm run install:all

      # - name: Run linting
      #   run: npm run lint

      # - name: Run unit tests
      #   run: npm run test:unit

      - name: Build backend services
        run: npm run build:file-service

  build-and-push:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    strategy:
      matrix:
        service:
          - name: nllb-service
            dockerfile: microservices/nllb-local/Dockerfile.railway
            context: microservices/nllb-local
          - name: file-processor
            dockerfile: microservices/file-processor/Dockerfile
            context: microservices/file-processor

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debug - Check secrets availability
        run: |
          echo "Checking secrets availability..."
          echo "AWS_REGION is set: ${{ secrets.AWS_REGION != '' }}"
          echo "AWS_ACCOUNT_ID is set: ${{ secrets.AWS_ACCOUNT_ID != '' }}"
          echo "AWS_ACCESS_KEY_ID is set: ${{ secrets.AWS_ACCESS_KEY_ID != '' }}"
          echo "AWS_SECRET_ACCESS_KEY is set: ${{ secrets.AWS_SECRET_ACCESS_KEY != '' }}"
          echo "ECR_REPOSITORY_NAME is set: ${{ secrets.ECR_REPOSITORY_NAME != '' }}"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Verify AWS credentials
        run: |
          echo "Testing AWS credentials..."
          aws sts get-caller-identity

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Verify ECR login
        run: |
          echo "ECR Registry: ${{ steps.login-ecr.outputs.registry }}"
          echo "Testing ECR access..."
          aws ecr describe-repositories --repository-names ${{ env.ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}
          tags: |
            type=ref,event=branch,suffix=-${{ matrix.service.name }}
            type=ref,event=pr,suffix=-${{ matrix.service.name }}
            type=sha,prefix={{branch}}-${{ matrix.service.name }}-
            type=raw,value=${{ matrix.service.name }}-latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ matrix.service.context }}
          file: ${{ matrix.service.dockerfile }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/arm64
          # Ê∑ªÂä†ÊûÑÂª∫ÂèÇÊï∞‰ª•ÈÅøÂÖçÊùÉÈôêÈóÆÈ¢ò
          build-args: |
            BUILDKIT_INLINE_CACHE=1

      - name: Image digest
        run: echo ${{ steps.build.outputs.digest }}

  security-scan:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2

      - name: Scan images for vulnerabilities
        run: |
          services=("nllb-service" "file-processor")
          for service in "${services[@]}"; do
            echo "Scanning $service..."
            aws ecr describe-image-scan-findings \
              --repository-name ${{ env.ECR_REPOSITORY }} \
              --image-id imageTag=$service-latest \
              --region ${{ env.AWS_REGION }} || echo "Scan not available for $service"
          done

  deploy-notification:
    needs: [build-and-push, security-scan]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deployment notification
        run: |
          echo "üöÄ Docker images built and pushed successfully!"
          echo "üì¶ Images available at:"
          echo "  - ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:nllb-service-latest"
          echo "  - ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:file-processor-latest" 