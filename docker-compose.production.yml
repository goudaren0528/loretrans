version: '3.8'

services:
  # NLLB 翻译服务 (使用 ECR 镜像)
  nllb-service:
    image: ${ECR_REGISTRY}/${ECR_REPOSITORY}:nllb-service-latest
    container_name: transly-nllb-service
    ports:
      - "8082:8080"
    environment:
      - NODE_ENV=production
      - PORT=8080
      - HOST=0.0.0.0
      - LOG_LEVEL=info
      - DEVICE=cpu
      - DTYPE=fp32
      - BATCH_SIZE=4
      - MODEL_PATH=/app/models/nllb-600m
      # Redis 缓存配置
      - REDIS_URL=redis://redis:6379
      - CACHE_TTL=3600
      # 性能配置
      - MAX_CONCURRENT_REQUESTS=5
      - REQUEST_TIMEOUT=30000
      - NODE_OPTIONS=--max-old-space-size=4096
    volumes:
      - nllb_logs:/app/logs
      - nllb_temp:/app/temp
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 90s
    deploy:
      resources:
        limits:
          memory: 6G
          cpus: '4.0'
        reservations:
          memory: 3G
          cpus: '2.0'

  # 文件处理服务 (使用 ECR 镜像)
  file-processor:
    image: ${ECR_REGISTRY}/${ECR_REPOSITORY}:file-processor-latest
    container_name: transly-file-processor
    ports:
      - "8081:8081"
    environment:
      - NODE_ENV=production
      - PORT=8081
      - HOST=0.0.0.0
      - LOG_LEVEL=info
      # 文件处理配置
      - UPLOAD_MAX_SIZE=50MB
      - TEMP_DIR=/app/temp
      - RESULTS_DIR=/app/results
      # 翻译服务配置
      - NLLB_SERVICE_URL=http://nllb-service:8080
      - TRANSLATION_TIMEOUT=60000
      # Redis 队列配置
      - REDIS_URL=redis://redis:6379
      - QUEUE_CONCURRENCY=3
    volumes:
      - file_uploads:/app/uploads
      - file_results:/app/results
      - file_temp:/app/temp
      - file_logs:/app/logs
    depends_on:
      redis:
        condition: service_healthy
      nllb-service:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'

  # Redis 缓存和队列服务
  redis:
    image: redis:7-alpine
    container_name: transly-redis
    ports:
      - "6379:6379"
    command: >
      redis-server 
      --appendonly yes 
      --appendfsync everysec
      --maxmemory 1gb
      --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'

  # Nginx 反向代理
  nginx:
    image: nginx:alpine
    container_name: transly-nginx
    ports:
      - "8083:80"
      - "8443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - nllb-service
      - file-processor
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '1.0'
        reservations:
          memory: 256M
          cpus: '0.5'

  # 监控服务 (可选)
  prometheus:
    image: prom/prometheus:latest
    container_name: transly-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana 仪表板 (可选)
  grafana:
    image: grafana/grafana:latest
    container_name: transly-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

volumes:
  # 持久化存储
  nllb_logs:
    driver: local
  nllb_temp:
    driver: local
  file_uploads:
    driver: local
  file_results:
    driver: local
  file_temp:
    driver: local
  file_logs:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  default:
    name: transly-network
    driver: bridge