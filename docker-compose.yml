version: '3.8'

services:
  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_SUPABASE_URL=${NEXT_PUBLIC_SUPABASE_URL}
      - NEXT_PUBLIC_SUPABASE_ANON_KEY=${NEXT_PUBLIC_SUPABASE_ANON_KEY}
      - SUPABASE_SERVICE_ROLE_KEY=${SUPABASE_SERVICE_ROLE_KEY}
      - CREEM_API_KEY=${CREEM_API_KEY}
      - NLLB_SERVICE_URL=http://nllb-service:8081
      - FILE_PROCESSOR_URL=http://file-processor:8082
    depends_on:
      - nllb-service
      - file-processor
    volumes:
      - ./frontend:/app
      - /app/node_modules
      - /app/.next
    networks:
      - transly-network

  # NLLB 翻译服务
  nllb-service:
    build:
      context: ./microservices/nllb-local
      dockerfile: Dockerfile
    ports:
      - "8081:8081"
    environment:
      - FLASK_ENV=development
      - MODEL_CACHE_DIR=/app/models
    volumes:
      - ./microservices/nllb-local:/app
      - nllb-models:/app/models
    networks:
      - transly-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # 文件处理服务
  file-processor:
    build:
      context: ./microservices/file-processor
      dockerfile: Dockerfile
    ports:
      - "8082:8082"
    environment:
      - FLASK_ENV=development
      - UPLOAD_DIR=/app/uploads
      - MAX_FILE_SIZE=50MB
    volumes:
      - ./microservices/file-processor:/app
      - file-uploads:/app/uploads
    networks:
      - transly-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis 缓存服务
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - transly-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx 反向代理 (生产环境)
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
    networks:
      - transly-network
    profiles:
      - production

volumes:
  nllb-models:
    driver: local
  file-uploads:
    driver: local
  redis-data:
    driver: local

networks:
  transly-network:
    driver: bridge

# 开发环境覆盖配置
# 使用: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
